{"path":"Work/00-assets/Pasted image 20240325164216.png","text":"(L_.j Since it's a basic app without any state management solutions. Here is a simple example. final darkTheme = ThemeData.dark().copyWith( scaffoldBackgroundColor: Colors.black, ) final lightTheme = ThemeData.light().copyWith( scaffoldBackgroundColor: Colors.white, ) void main() { runApp(const App()); } class App extends StatefulWidget { const App({super.key}); @override State<App> createState() => _AppState(); } class _AppState extends State<App> { Brightness brightness = Brightness.dark; AZOR NI o F-Â£-A N N [1) [N QIR setState(() { if (brightness == Brightness.dark) { brightness = Brightness.light; } else { brightness = Brightness.dark; } HD) } @override Widget build(BuildContext context) ({ return MaterialApp( theme: brightness == Brightness.dark ? darkTheme : lightTheme, home: Scaffold( body: Switch( value: brightness == Brightness.dark, onChanged: (_) => _toggleTheme()), Do )5 } } However, managing themes usually requires a bit more work. You might want to store the theme, etc. This is not the way to go about it.","libVersion":"0.3.1","langs":"eng"}